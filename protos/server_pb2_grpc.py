# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import server_pb2 as server__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Signup = channel.unary_unary(
                '/server.Server/Signup',
                request_serializer=server__pb2.UserAuthRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/server.Server/Login',
                request_serializer=server__pb2.UserAuthRequest.SerializeToString,
                response_deserializer=server__pb2.UserLoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/server.Server/Logout',
                request_serializer=server__pb2.UserLogoutRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.ListUsernames = channel.unary_unary(
                '/server.Server/ListUsernames',
                request_serializer=server__pb2.ListUsernamesRequest.SerializeToString,
                response_deserializer=server__pb2.ListUsernamesResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/server.Server/SendMessage',
                request_serializer=server__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.RegisterClient = channel.unary_unary(
                '/server.Server/RegisterClient',
                request_serializer=server__pb2.RegisterClientRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.ReadMessages = channel.unary_unary(
                '/server.Server/ReadMessages',
                request_serializer=server__pb2.ReadMessagesRequest.SerializeToString,
                response_deserializer=server__pb2.ReadMessageResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/server.Server/DeleteAccount',
                request_serializer=server__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/server.Server/DeleteMessage',
                request_serializer=server__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.FetchSentMessages = channel.unary_unary(
                '/server.Server/FetchSentMessages',
                request_serializer=server__pb2.FetchSentMessagesRequest.SerializeToString,
                response_deserializer=server__pb2.FetchSentMessagesResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.stream_unary(
                '/server.Server/Heartbeat',
                request_serializer=server__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=server__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.CurrentLeader = channel.unary_unary(
                '/server.Server/CurrentLeader',
                request_serializer=server__pb2.CurrentLeaderRequest.SerializeToString,
                response_deserializer=server__pb2.CurrentLeaderResponse.FromString,
                _registered_method=True)
        self.ConfirmServerDeath = channel.unary_unary(
                '/server.Server/ConfirmServerDeath',
                request_serializer=server__pb2.StatusRequest.SerializeToString,
                response_deserializer=server__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.UploadImage = channel.stream_unary(
                '/server.Server/UploadImage',
                request_serializer=server__pb2.ImageChunk.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.CreateAlbum = channel.unary_unary(
                '/server.Server/CreateAlbum',
                request_serializer=server__pb2.CreateAlbumRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.AddAlbumEditor = channel.unary_unary(
                '/server.Server/AddAlbumEditor',
                request_serializer=server__pb2.AddAlbumEditorRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.RemoveAlbumEditor = channel.unary_unary(
                '/server.Server/RemoveAlbumEditor',
                request_serializer=server__pb2.RemoveAlbumEditorRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.DeleteAlbum = channel.unary_unary(
                '/server.Server/DeleteAlbum',
                request_serializer=server__pb2.DeleteAlbumRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.DeleteImage = channel.unary_unary(
                '/server.Server/DeleteImage',
                request_serializer=server__pb2.DeleteImageRequest.SerializeToString,
                response_deserializer=server__pb2.StandardServerResponse.FromString,
                _registered_method=True)
        self.FetchPhotos = channel.unary_stream(
                '/server.Server/FetchPhotos',
                request_serializer=server__pb2.FetchPhotosRequest.SerializeToString,
                response_deserializer=server__pb2.ImageChunk.FromString,
                _registered_method=True)


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Signup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsernames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchSentMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrentLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmServerDeath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAlbum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAlbumEditor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAlbumEditor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAlbum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchPhotos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Signup': grpc.unary_unary_rpc_method_handler(
                    servicer.Signup,
                    request_deserializer=server__pb2.UserAuthRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=server__pb2.UserAuthRequest.FromString,
                    response_serializer=server__pb2.UserLoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=server__pb2.UserLogoutRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'ListUsernames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsernames,
                    request_deserializer=server__pb2.ListUsernamesRequest.FromString,
                    response_serializer=server__pb2.ListUsernamesResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=server__pb2.SendMessageRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=server__pb2.RegisterClientRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'ReadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMessages,
                    request_deserializer=server__pb2.ReadMessagesRequest.FromString,
                    response_serializer=server__pb2.ReadMessageResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=server__pb2.DeleteAccountRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=server__pb2.DeleteMessageRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'FetchSentMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSentMessages,
                    request_deserializer=server__pb2.FetchSentMessagesRequest.FromString,
                    response_serializer=server__pb2.FetchSentMessagesResponse.SerializeToString,
            ),
            'Heartbeat': grpc.stream_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=server__pb2.HeartbeatRequest.FromString,
                    response_serializer=server__pb2.HeartbeatResponse.SerializeToString,
            ),
            'CurrentLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrentLeader,
                    request_deserializer=server__pb2.CurrentLeaderRequest.FromString,
                    response_serializer=server__pb2.CurrentLeaderResponse.SerializeToString,
            ),
            'ConfirmServerDeath': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmServerDeath,
                    request_deserializer=server__pb2.StatusRequest.FromString,
                    response_serializer=server__pb2.StatusResponse.SerializeToString,
            ),
            'UploadImage': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadImage,
                    request_deserializer=server__pb2.ImageChunk.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'CreateAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAlbum,
                    request_deserializer=server__pb2.CreateAlbumRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'AddAlbumEditor': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAlbumEditor,
                    request_deserializer=server__pb2.AddAlbumEditorRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'RemoveAlbumEditor': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAlbumEditor,
                    request_deserializer=server__pb2.RemoveAlbumEditorRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'DeleteAlbum': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAlbum,
                    request_deserializer=server__pb2.DeleteAlbumRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'DeleteImage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteImage,
                    request_deserializer=server__pb2.DeleteImageRequest.FromString,
                    response_serializer=server__pb2.StandardServerResponse.SerializeToString,
            ),
            'FetchPhotos': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchPhotos,
                    request_deserializer=server__pb2.FetchPhotosRequest.FromString,
                    response_serializer=server__pb2.ImageChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('server.Server', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Signup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/Signup',
            server__pb2.UserAuthRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/Login',
            server__pb2.UserAuthRequest.SerializeToString,
            server__pb2.UserLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/Logout',
            server__pb2.UserLogoutRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsernames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/ListUsernames',
            server__pb2.ListUsernamesRequest.SerializeToString,
            server__pb2.ListUsernamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/SendMessage',
            server__pb2.SendMessageRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/RegisterClient',
            server__pb2.RegisterClientRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/ReadMessages',
            server__pb2.ReadMessagesRequest.SerializeToString,
            server__pb2.ReadMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/DeleteAccount',
            server__pb2.DeleteAccountRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/DeleteMessage',
            server__pb2.DeleteMessageRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchSentMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/FetchSentMessages',
            server__pb2.FetchSentMessagesRequest.SerializeToString,
            server__pb2.FetchSentMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/server.Server/Heartbeat',
            server__pb2.HeartbeatRequest.SerializeToString,
            server__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CurrentLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/CurrentLeader',
            server__pb2.CurrentLeaderRequest.SerializeToString,
            server__pb2.CurrentLeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmServerDeath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/ConfirmServerDeath',
            server__pb2.StatusRequest.SerializeToString,
            server__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/server.Server/UploadImage',
            server__pb2.ImageChunk.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/CreateAlbum',
            server__pb2.CreateAlbumRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddAlbumEditor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/AddAlbumEditor',
            server__pb2.AddAlbumEditorRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveAlbumEditor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/RemoveAlbumEditor',
            server__pb2.RemoveAlbumEditorRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAlbum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/DeleteAlbum',
            server__pb2.DeleteAlbumRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server.Server/DeleteImage',
            server__pb2.DeleteImageRequest.SerializeToString,
            server__pb2.StandardServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchPhotos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/server.Server/FetchPhotos',
            server__pb2.FetchPhotosRequest.SerializeToString,
            server__pb2.ImageChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
