syntax = "proto3";

package server;

service Server {
    rpc Signup(UserAuthRequest) returns (StandardServerResponse);
    rpc Login(UserAuthRequest) returns (UserLoginResponse);
    rpc Logout(UserLogoutRequest) returns (StandardServerResponse);
    rpc ListUsernames(ListUsernamesRequest) returns (ListUsernamesResponse);
    rpc SendMessage(SendMessageRequest) returns (StandardServerResponse);
    rpc RegisterClient(RegisterClientRequest) returns (StandardServerResponse);
    rpc ReadMessages(ReadMessagesRequest) returns (ReadMessageResponse);
    rpc DeleteAccount(DeleteAccountRequest) returns (StandardServerResponse);
    rpc DeleteMessage(DeleteMessageRequest) returns (StandardServerResponse);
    rpc FetchSentMessages(FetchSentMessagesRequest) returns (FetchSentMessagesResponse);
    rpc Heartbeat(stream HeartbeatRequest) returns (HeartbeatResponse);
    rpc CurrentLeader(CurrentLeaderRequest) returns (CurrentLeaderResponse);
    rpc ConfirmServerDeath(StatusRequest) returns (StatusResponse);
    rpc UploadImage(stream ImageChunk) returns (StandardServerResponse);
    rpc CreateAlbum(CreateAlbumRequest) returns (StandardServerResponse);
    rpc AddAlbumEditor(AddAlbumEditorRequest) returns (StandardServerResponse);
    rpc RemoveAlbumEditor(RemoveAlbumEditorRequest) returns (StandardServerResponse);
    rpc DeleteAlbum(DeleteAlbumRequest) returns (StandardServerResponse);
    rpc DeleteImage(DeleteImageRequest) returns (StandardServerResponse);
    rpc FetchPhotos(FetchPhotosRequest) returns (stream ImageChunk);
    rpc FetchUserAlbums(FetchUserAlbumsRequest) returns (FetchUserAlbumsResponse);
    rpc FetchAlbumEditors(FetchAlbumEditorsRequest) returns (FetchUserAlbumsResponse);
}

message StandardServerResponse {
    bool success = 1;
    string message = 2;
}

message UserAuthRequest {
    string username = 1;
    string password = 2;
    bool from_client = 3;
}

message UserLoginSuccess {
    bool success = 1;
    string message = 2;
    int32 unread_message_count = 3;
}

message UserLoginResponse {
    oneof response {
        UserLoginSuccess success = 1;
        StandardServerResponse failure = 2;
    }
}

message UserLogoutRequest {
    string username = 1;
    bool from_client = 2;
}

message ListUsernames {
    bool success = 1;
    string message = 2;
    repeated string matches = 3;
}
message ListUsernamesRequest {
    string username_pattern = 1;
}

message ListUsernamesResponse {
    oneof response {
        ListUsernames success = 1;
        StandardServerResponse failure = 2;
    }
}

message SendMessageRequest {
    string sender_username = 1;
    string target_username = 2;
    int32 timestamp = 3;
    string message = 4;
    optional string message_id = 5;
    bool from_client = 6;
}


message RegisterClientRequest {
    string username = 1;
    string host = 2;
    int32 port = 3; 
    bool from_client = 4;
}

message ReadMessagesRequest {
    string username = 1;
    int32 num_messages = 2;
    bool from_client = 3;
}

message UnreadMessage {
    string message_id = 1;
    string sender = 2;
    int32 timestamp = 3;
    string message = 4;
}

message ReadMessage {
    bool success = 1;
    string message = 2;
    repeated UnreadMessage messages = 3;
}

message ReadMessageResponse {
    oneof response {
        ReadMessage success = 1;
        StandardServerResponse failure = 2;
    }
}

message DeleteAccountRequest {
    string username = 1;
    bool from_client = 2;
}

message DeleteMessageRequest {
    string sender_username = 1;
    string message_id = 2;
    bool from_client = 3;
}

message FetchSentMessagesRequest {
    string username = 1;
}

// Maps a target_username to all unread messages sent to that user
message SentMessages {
    string target_username = 1;
    repeated UnreadMessage messages = 2;
}

message FetchedSentMessages {
    bool success = 1;
    string message = 2;
    repeated SentMessages sent_messages = 3;
}

message FetchSentMessagesResponse {
    oneof response {
        FetchedSentMessages success = 1;
        StandardServerResponse failure = 2;
    }
}

message HeartbeatRequest {
    int32 server_id = 1;
    int64 timestamp = 2;
}

message HeartbeatResponse {
    bool acknowledged = 1;
}

message CurrentLeaderRequest {
    // This message can be empty, as we are just using it to trigger the server to send back the current leader
}

message CurrentLeaderResponse {
    int32 leader = 1;
}

message StatusRequest {
    int32 server_id = 1;
}

message StatusResponse {
    bool is_dead = 1; // true if the server is dead, false if it is alive
}

message ImageMetadata {
    string username = 1; // The username of the user who uploaded the image
    string image_name = 2; // The name of the image file
    int32 size = 3; // Size of the image in bytes
    string file_type = 4; // Type of the image file (e.g., "image/png", "image/jpeg")
    string album = 5; // Album that the image belongs to
}

message ImageChunk {
    oneof payload {
        ImageMetadata metadata = 1; // Metadata about the image
        bytes image_data = 2; // The actual image data
    }
    bool from_client = 3; // Indicates if the request is from a client
}

message CreateAlbumRequest {
    string username = 1; // The username of the user creating the album
    string album_name = 2; // The name of the album being created
    bool from_client = 3; // Indicates if the request is from a client
}

message AddAlbumEditorRequest {
    string requestor_username = 1; // The username of the user who is making the "add editor" request
    string editor_username = 2; // The username of the user being added as an editor
    string album_name = 3; // The name of the album to which the editor is being added
    bool from_client = 4; // Indicates if the request is from a client
}

message RemoveAlbumEditorRequest {
    string requestor_username = 1; // The username of the user who is making the "add editor" request
    string editor_username = 2; // The username of the user being added as an editor
    string album_name = 3; // The name of the album to which the editor is being added
    bool from_client = 4; // Indicates if the request is from a client
}

message DeleteAlbumRequest {
    string username = 1; // The username of the user deleting the album
    string album_name = 2; // The name of the album being deleted
    bool from_client = 3; // Indicates if the request is from a client
}

message DeleteImageRequest {
    string username = 1; // The username of the user deleting the image
    string image_name = 2; // The name of the image being deleted
    string album_name = 3; // The name of the album from which the image is being deleted
    bool from_client = 4; // Indicates if the request is from a client
}

message FetchPhotosRequest {
    string username = 1; // The username of the user fetching photos
    string album_name = 2; // The name of the album from which photos are being fetched
    int32 page = 3; // The page number for pagination
    int32 page_size = 4; // The number of photos per page
    bool from_client = 5; // Indicates if the request is from a client
}

message FetchUserAlbumsRequest {
    string username = 1; // The username of the user whose albums are being fetched
    bool from_client = 2; // Indicates if the request is from a client
}

message FetchUserAlbumsResponse {
    bool success = 1; // Indicates if the request was successful
    string message = 2; // A message providing additional information
    repeated string albums = 3; // A list of album names owned by the user
}

message FetchAlbumEditorsRequest {
    string username = 1; // The username of the user whose album editors are being fetched
    string album_name = 2; // The name of the album for which editors are being fetched
}

message FetchAlbumEditorsResponse {
    bool success = 1; // Indicates if the request was successful
    string message = 2; // A message providing additional information
    repeated string editors = 3; // A list of usernames of users who can edit the album
}